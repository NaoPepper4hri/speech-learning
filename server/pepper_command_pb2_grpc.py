# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import pepper_command_pb2 as pepper__command__pb2


class PepperStub(object):
    """Pepper service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListenMovementCommand = channel.unary_stream(
                '/pepper_command.Pepper/ListenMovementCommand',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=pepper__command__pb2.Command.FromString,
                )


class PepperServicer(object):
    """Pepper service.
    """

    def ListenMovementCommand(self, request, context):
        """Connects to server and waits for new movement commands
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PepperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListenMovementCommand': grpc.unary_stream_rpc_method_handler(
                    servicer.ListenMovementCommand,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=pepper__command__pb2.Command.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pepper_command.Pepper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Pepper(object):
    """Pepper service.
    """

    @staticmethod
    def ListenMovementCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pepper_command.Pepper/ListenMovementCommand',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            pepper__command__pb2.Command.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
